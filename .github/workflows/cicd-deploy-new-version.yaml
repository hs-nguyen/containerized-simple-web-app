"on":
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true
        default: 'latest'
env:
  AWS-REGION: ap-southeast-1
  name: Build and Push Docker Image
  ECR-REPOSITORY: simple-web-app
  ECR-REGISTRY: 891377055161.dkr.ecr.ap-southeast-1.amazonaws.com
  SERVICE-NAME: simple-web-app-service
  cluster: simple-web-app-cluster
  TASK-DEFINITION: simple-web-app-task
  path: web/
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
          aws-region: ${{ env.AWS-REGION }}

      - name: Logign to Amazon ECR
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        id: build-image
        run: |
          echo "Logging in to Amazon ECR..."
          aws ecr get-login-password --region ${{ env.AWS-REGION }} | \
          docker login --username AWS --password-stdin ${{ env.ECR-REGISTRY }}
          echo "Building Docker image..."
          docker build -t ${{ env.ECR-REPOSITORY }}:latest ${{ env.path }}
      - name: Tag Docker image
        run: |
          echo "Tagging Docker image..."
          docker tag ${{ env.ECR-REPOSITORY }}:latest ${{ env.ECR-REGISTRY }}/${{ env.ECR-REPOSITORY }}:latest

      - name: Push Docker image to ECR
        run: |
          echo "Pushing Docker image to ECR..."
          docker push ${{ env.ECR-REGISTRY }}/${{ env.ECR-REPOSITORY }}:latest  
      - name: Success
        run: echo "Docker image built and pushed successfully!"
      - name: Create or update ECS task definition
        run: |
          echo "Creating or updating ECS task definition..."
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.TASK-DEFINITION }} || echo "{}")
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ env.ECR-REGISTRY }}/${{ env.ECR-REPOSITORY }}:latest" \
            '.taskDefinition | .containerDefinitions[0].image = $IMAGE | .family = ${{ env.TASK-DEFINITION }} | del(.revision, .status, .taskDefinitionArn, .requiresAttributes, .compatibilities)')
          echo $NEW_TASK_DEFINITION | jq '.' > task-definition.json
          aws ecs register-task-definition --cli-input-json file://task-definition.json
      - name: Update ECS Service
        run: |
          echo "Updating ECS service..."
          aws ecs update-service --cluster ${{ env.cluster }} --service ${{ env.SERVICE-NAME }} --force-new-deployment

      - name: Notify Deployment Success
        run: echo "Deployment to ECS completed successfully!"